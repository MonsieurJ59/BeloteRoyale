import { pool } from "../db";

async function seed() {
  try {
    console.log("üå± D√©marrage du seed avec donn√©es simplifi√©es...");

    // Nettoyer toutes les tables (dans l'ordre pour respecter les contraintes de cl√©s √©trang√®res)
    console.log("üßπ Nettoyage des tables existantes...");
    await pool.query("DELETE FROM matches");
    await pool.query("DELETE FROM team_tournament_stats");
    await pool.query("DELETE FROM team_tournament");
    await pool.query("DELETE FROM tournament_match_configs");
    await pool.query("DELETE FROM teams");
    await pool.query("DELETE FROM tournaments");

    // ==========================================
    // CR√âATION DES √âQUIPES (30 √©quipes)
    // ==========================================
    console.log("üë• Cr√©ation de 30 √©quipes...");
    
    const teams = [
      // √âquipes th√©matiques fran√ßaises
      { name: "Les As de Pique", player1: "Antoine", player2: "Am√©lie" },
      { name: "Les Rois de C≈ìur", player1: "Baptiste", player2: "B√©atrice" },
      { name: "Les Dames de Carreau", player1: "Cl√©ment", player2: "Camille" },
      { name: "Les Valets de Tr√®fle", player1: "Damien", player2: "Delphine" },
      { name: "Les Ma√Ætres du Jeu", player1: "√âtienne", player2: "√âlise" },
      { name: "Les Champions", player1: "Fabien", player2: "Fanny" },
      { name: "Les Virtuoses", player1: "Gabriel", player2: "Gabrielle" },
      { name: "Les Strat√®ges", player1: "Henri", player2: "H√©l√®ne" },
      { name: "Les Invincibles", player1: "Julien", player2: "Julie" },
      { name: "Les L√©gendes", player1: "Kevin", player2: "Karine" },
      
      // √âquipes r√©gionales
      { name: "Les Parisiens", player1: "Louis", player2: "Laure" },
      { name: "Les Marseillais", player1: "Marc", player2: "Marie" },
      { name: "Les Lyonnais", player1: "Nicolas", player2: "Nathalie" },
      { name: "Les Toulousains", player1: "Olivier", player2: "Oc√©ane" },
      { name: "Les Bordelais", player1: "Pierre", player2: "Pauline" },
      { name: "Les Lillois", player1: "Quentin", player2: "Quitterie" },
      { name: "Les Nantais", player1: "Rapha√´l", player2: "Rachel" },
      { name: "Les Strasbourgeois", player1: "S√©bastien", player2: "Sophie" },
      { name: "Les Rennais", player1: "Thomas", player2: "Th√©a" },
      { name: "Les Montpelli√©rains", player1: "Ulysse", player2: "Ursula" },
      
      // √âquipes cr√©atives
      { name: "Les Foudres de Belote", player1: "Victor", player2: "Victoire" },
      { name: "Les √âclairs Dor√©s", player1: "William", player2: "Wendy" },
      { name: "Les Tornades Bleues", player1: "Xavier", player2: "Xavi√®re" },
      { name: "Les Com√®tes Rouges", player1: "Yann", player2: "Yasmine" },
      { name: "Les M√©t√©ores Verts", player1: "Zacharie", player2: "Zo√©" },
      { name: "Les Ph√©nix Dor√©s", player1: "Adrien", player2: "Ana√Øs" },
      { name: "Les Dragons Noirs", player1: "Bastien", player2: "Blandine" },
      { name: "Les Aigles Royaux", player1: "C√©dric", player2: "C√©line" },
      { name: "Les Lions Sauvages", player1: "Dorian", player2: "Diane" },
      { name: "Les Tigres Blancs", player1: "√âmile", player2: "Estelle" }
    ];

    const teamIds: number[] = [];
    for (const team of teams) {
      const [result] = await pool.query(
        "INSERT INTO teams (name, player1, player2) VALUES (?, ?, ?)",
        [team.name, team.player1, team.player2]
      );
      teamIds.push((result as any).insertId);
    }

    // ==========================================
    // CR√âATION DES TOURNOIS (2 tournois)
    // ==========================================
    console.log("üèÜ Cr√©ation de 2 tournois...");

    const tournaments = [
      {
        name: "Championnat de Printemps 2024",
        date: new Date("2024-03-15"),
        status: "completed" as const,
        description: "Tournoi termin√© avec tous les matchs jou√©s"
      },
      {
        name: "Coupe d'√ât√© 2024",
        date: new Date("2024-06-20"),
        status: "upcoming" as const,
        description: "Tournoi √† venir"
      }
    ];

    const tournamentIds: number[] = [];
    for (const tournament of tournaments) {
      const [result] = await pool.query(
        "INSERT INTO tournaments (name, date, status) VALUES (?, ?, ?)",
        [tournament.name, tournament.date, tournament.status]
      );
      const tournamentId = (result as any).insertId;
      tournamentIds.push(tournamentId);

      // Cr√©er les configurations de match pour chaque tournoi
      await pool.query(
        "INSERT INTO tournament_match_configs (tournament_id, match_type, is_enabled, max_matches) VALUES (?, ?, ?, ?)",
        [tournamentId, 'preliminaires', true, 8]
      );
      
      // Cr√©er 8 configurations pour les manches principales
      for (let i = 1; i <= 8; i++) {
        await pool.query(
          "INSERT INTO tournament_match_configs (tournament_id, match_type, is_enabled, max_matches) VALUES (?, ?, ?, ?)",
          [tournamentId, `principal_${i}`, true, 8]
        );
      }
    }

    // ==========================================
    // INSCRIPTION DES √âQUIPES AUX TOURNOIS
    // ==========================================
    console.log("üìù Inscription des √©quipes aux tournois...");

    // Fonction pour m√©langer un tableau
    function shuffleArray<T>(array: T[]): T[] {
      const shuffled = [...array];
      for (let i = shuffled.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        // Fix TypeScript error by using temporary variable
        const temp = shuffled[i];
        shuffled[i] = shuffled[j]!;
        shuffled[j] = temp!;
      }
      return shuffled;
    }

    // Inscrire 16 √©quipes au tournoi termin√©
    const completedTournamentTeams = shuffleArray(teamIds).slice(0, 16);
    for (const teamId of completedTournamentTeams) {
      // Inscription √©quipe-tournoi
      await pool.query(
        "INSERT INTO team_tournament (team_id, tournament_id) VALUES (?, ?)",
        [teamId, tournamentIds[0]]
      );

      // Cr√©er les stats initiales
      await pool.query(
        "INSERT INTO team_tournament_stats (team_id, tournament_id, prelim_points, wins, losses) VALUES (?, ?, ?, ?, ?)",
        [teamId, tournamentIds[0], 0, 0, 0]
      );
    }

    // Inscrire 16 √©quipes au tournoi √† venir
    const upcomingTournamentTeams = shuffleArray(teamIds).slice(0, 16);
    for (const teamId of upcomingTournamentTeams) {
      // Inscription √©quipe-tournoi
      await pool.query(
        "INSERT INTO team_tournament (team_id, tournament_id) VALUES (?, ?)",
        [teamId, tournamentIds[1]]
      );

      // Cr√©er les stats initiales
      await pool.query(
        "INSERT INTO team_tournament_stats (team_id, tournament_id, prelim_points, wins, losses) VALUES (?, ?, ?, ?, ?)",
        [teamId, tournamentIds[1], 0, 0, 0]
      );
    }

    // ==========================================
    // FONCTION POUR G√âN√âRER UN SCORE
    // ==========================================
    function generateBeloteScore(): { scoreA: number; scoreB: number; winnerId: number } {
      const scores = [
        { scoreA: 162, scoreB: 0, winnerId: 1 },   // Capot
        { scoreA: 258, scoreB: 0, winnerId: 1 },   // G√©n√©ral
        { scoreA: 152, scoreB: 10, winnerId: 1 },  // Victoire normale
        { scoreA: 82, scoreB: 80, winnerId: 1 },   // Victoire serr√©e
        { scoreA: 91, scoreB: 71, winnerId: 1 },   // Victoire moyenne
        { scoreA: 0, scoreB: 162, winnerId: 2 },   // Capot inverse
        { scoreA: 0, scoreB: 258, winnerId: 2 },   // G√©n√©ral inverse
        { scoreA: 10, scoreB: 152, winnerId: 2 },  // D√©faite normale
        { scoreA: 80, scoreB: 82, winnerId: 2 },   // D√©faite serr√©e
        { scoreA: 71, scoreB: 91, winnerId: 2 }    // D√©faite moyenne
      ];
      return scores[Math.floor(Math.random() * scores.length)]!;
    }

    // ==========================================
    // TOURNOI TERMIN√â : CR√âATION DES MATCHS
    // ==========================================
    console.log("üèÜ Cr√©ation des matchs pour le tournoi termin√©...");
    
    // Phase pr√©liminaires : chaque √©quipe joue 1 match pr√©liminaire
    for (let i = 0; i < 8; i++) {
      const teamA = completedTournamentTeams[i * 2];
      const teamB = completedTournamentTeams[i * 2 + 1];
      
      const score = generateBeloteScore();
      const winnerId = score.winnerId === 1 ? teamA : teamB;
      
      await pool.query(
        "INSERT INTO matches (tournament_id, match_type, team_a_id, team_b_id, score_a, score_b, winner_id) VALUES (?, ?, ?, ?, ?, ?, ?)",
        [tournamentIds[0], 'preliminaires', teamA, teamB, score.scoreA, score.scoreB, winnerId]
      );
      
      // Mettre √† jour les statistiques
      if (score.winnerId === 1) {
        await pool.query(
          "UPDATE team_tournament_stats SET wins = wins + 1 WHERE team_id = ? AND tournament_id = ?",
          [teamA, tournamentIds[0]]
        );
        await pool.query(
          "UPDATE team_tournament_stats SET losses = losses + 1 WHERE team_id = ? AND tournament_id = ?",
          [teamB, tournamentIds[0]]
        );
      } else {
        await pool.query(
          "UPDATE team_tournament_stats SET wins = wins + 1 WHERE team_id = ? AND tournament_id = ?",
          [teamB, tournamentIds[0]]
        );
        await pool.query(
          "UPDATE team_tournament_stats SET losses = losses + 1 WHERE team_id = ? AND tournament_id = ?",
          [teamA, tournamentIds[0]]
        );
      }
    }

    // Phases principales : 8 manches, chaque √©quipe joue exactement 1 match par manche
    for (let round = 1; round <= 8; round++) {
      console.log(`Cr√©ation des matchs principal_${round}...`);
      
      // Utilisation de l'algorithme de round-robin
      // Pour 16 √©quipes, on fixe une √©quipe et on fait tourner les 15 autres
      const fixedTeam = completedTournamentTeams[0];
      const rotatingTeams = [...completedTournamentTeams.slice(1)];
      
      // Rotation bas√©e sur la manche
      for (let i = 0; i < round - 1; i++) {
        const firstTeam = rotatingTeams.shift();
        if (firstTeam) rotatingTeams.push(firstTeam);
      }
      
      // Premier match: √©quipe fixe contre premi√®re √©quipe rotative
      let teamA = fixedTeam;
      let teamB = rotatingTeams[0];
      
      let score = generateBeloteScore();
      let winnerId = score.winnerId === 1 ? teamA : teamB;
      
      await pool.query(
        "INSERT INTO matches (tournament_id, match_type, team_a_id, team_b_id, score_a, score_b, winner_id) VALUES (?, ?, ?, ?, ?, ?, ?)",
        [tournamentIds[0], `principal_${round}`, teamA, teamB, score.scoreA, score.scoreB, winnerId]
      );
      
      // Mettre √† jour les statistiques
      if (score.winnerId === 1) {
        await pool.query(
          "UPDATE team_tournament_stats SET wins = wins + 1 WHERE team_id = ? AND tournament_id = ?",
          [teamA, tournamentIds[0]]
        );
        await pool.query(
          "UPDATE team_tournament_stats SET losses = losses + 1 WHERE team_id = ? AND tournament_id = ?",
          [teamB, tournamentIds[0]]
        );
      } else {
        await pool.query(
          "UPDATE team_tournament_stats SET wins = wins + 1 WHERE team_id = ? AND tournament_id = ?",
          [teamB, tournamentIds[0]]
        );
        await pool.query(
          "UPDATE team_tournament_stats SET losses = losses + 1 WHERE team_id = ? AND tournament_id = ?",
          [teamA, tournamentIds[0]]
        );
      }
      
      // Les 7 autres matchs: appariement des √©quipes restantes
      for (let i = 0; i < 7; i++) {
        teamA = rotatingTeams[i + 1];
        teamB = rotatingTeams[14 - i];
        
        score = generateBeloteScore();
        winnerId = score.winnerId === 1 ? teamA : teamB;
        
        await pool.query(
          "INSERT INTO matches (tournament_id, match_type, team_a_id, team_b_id, score_a, score_b, winner_id) VALUES (?, ?, ?, ?, ?, ?, ?)",
          [tournamentIds[0], `principal_${round}`, teamA, teamB, score.scoreA, score.scoreB, winnerId]
        );
        
        // Mettre √† jour les statistiques
        if (score.winnerId === 1) {
          await pool.query(
            "UPDATE team_tournament_stats SET wins = wins + 1 WHERE team_id = ? AND tournament_id = ?",
            [teamA, tournamentIds[0]]
          );
          await pool.query(
            "UPDATE team_tournament_stats SET losses = losses + 1 WHERE team_id = ? AND tournament_id = ?",
            [teamB, tournamentIds[0]]
          );
        } else {
          await pool.query(
            "UPDATE team_tournament_stats SET wins = wins + 1 WHERE team_id = ? AND tournament_id = ?",
            [teamB, tournamentIds[0]]
          );
          await pool.query(
            "UPDATE team_tournament_stats SET losses = losses + 1 WHERE team_id = ? AND tournament_id = ?",
            [teamA, tournamentIds[0]]
          );
        }
      }
    }

    console.log("‚úÖ Seed termin√© avec succ√®s !");
    console.log("üìä R√©sum√© des donn√©es cr√©√©es :");
    console.log(`   - ${teams.length} √©quipes`);
    console.log(`   - 2 tournois (1 termin√©, 1 √† venir)`);
    console.log("   - Tournoi 1 : Termin√© (16 √©quipes, 9 matchs chacune)");
    console.log("   - Tournoi 2 : √Ä venir (16 √©quipes)");

  } catch (error) {
    console.error("‚ùå Erreur lors du seed:", error);
  } finally {
    await pool.end();
  }
}

seed();